# -*- coding: utf-8 -*-
"""moviereview.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Wi5raQye8aWC-57EgJlhwRP8aP85DL7J
"""

import pandas as pd
import numpy as np
import warnings
warnings.filterwarnings("ignore")

data = pd.read_csv("/content/Movie_Review.csv")

data.head()

data.shape

type(data)

data.tail()

data["sentiment"].value_counts()

# one hot encoding
# label encoder

# positive -> 1
# negative -> 0
data.replace({"sentiment": {"positive": 1, "negative": 0}}, inplace=True)

data.head()

data.tail()

data["sentiment"].value_counts()

# LSTM -> LONG SHORT TERM MEMORY
# RNN -> TEXTUAL DATA

test_data.shape
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences

train_data, test_data = train_test_split(data, test_size = 0.2, random_state=42)

train_data.shape

test_data.shape

tokenizer = Tokenizer(num_words = 5000)
tokenizer.fit_on_texts(train_data["review"])

X_train = pad_sequences(tokenizer.texts_to_sequences(train_data["review"]), maxlen=200)
X_test = pad_sequences(tokenizer.texts_to_sequences(test_data["review"]), maxlen=200)

X_train

X_test

Y_train = train_data["sentiment"]
Y_test = test_data["sentiment"]

Y_train

# LSTM MODEL BUILDING

model = Sequential()
model.add(Embedding(input_dim =5000, output_dim = 128, input_length = 200))
model.add(LSTM(128, dropout=0.2, recurrent_dropout = 0.2))
model.add(Dense(1, activation = "sigmoid"))

model.summary()

model.compile(optimizer = "adam", loss="binary_crossentropy", metrics=["accuracy"])

import numpy as np
import pandas as pd

# Assuming Y_train is a Pandas Series
# Replace 'pos' and 'neg' with 1 and 0 respectively
Y_train = Y_train.map({'pos': 1, 'neg': 0})

# Now you can convert to float32
Y_train = Y_train.astype(np.float32)

# Now, proceed with model training:
model.fit(X_train, Y_train, epochs=5, batch_size=64, validation_split=0.2)

model.save("model.h5")

import joblib
joblib.dump(tokenizer, "tokenizer.pkl")

import numpy as np
import pandas as pd

# Assuming Y_test is a Pandas Series
# Replace 'pos' and 'neg' with 1 and 0 respectively
Y_test = Y_test.map({'pos': 1, 'neg': 0})

# Now you can convert to float32
Y_test = Y_test.astype(np.float32)

# Now, evaluate the model:
loss, accuracy = model.evaluate(X_test, Y_test)

print(loss)

print(accuracy)

# Building Predictive System

def predictive_system(review):
  sequences = tokenizer.texts_to_sequences([review])
  padded_sequence = pad_sequences(sequences, maxlen=200)
  prediction = model.predict(padded_sequence)
  sentiment = "negative" if prediction[0][0] > 0.5 else "positive"
  return sentiment

predictive_system("This movie was fantastic and amazing")

predictive_system("A visual masterpiece")